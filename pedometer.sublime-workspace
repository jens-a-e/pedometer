{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"print",
				"println"
			],
			[
				"align",
				"alignSelf\tenum('auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline')"
			],
			[
				"alig",
				"alignContent\tenum('flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around')"
			],
			[
				"margin",
				"marginVertical\tnumber, string"
			],
			[
				"flex",
				"flexDirection\tenum('row', 'row-reverse', 'column', 'column-reverse')"
			],
			[
				"paddin",
				"paddingBottom\tnumber, string"
			],
			[
				"font",
				"fontWeight\tenum('normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900')"
			],
			[
				"crea",
				"StyleSheet.create"
			],
			[
				"sunri",
				"sunrise_event          Let (main.rs) : let mut sunrise_event = Event::new(nanoid!(), Local::now().format(format).to_string())\\                        "
			],
			[
				"DAte",
				"DateTime               Struct (datetime.rs) : pub struct DateTime<Tz: TimeZone>      "
			],
			[
				"to",
				"to_string"
			],
			[
				"sunrise",
				"sunrise_event          Let (main.rs) : let sunrise_event = Event::new(nanoid!(), Local::now().format(format).to_string())\\                            "
			],
			[
				"fmt",
				"format\tformat!(â€¦)"
			],
			[
				"Time",
				"TimeZone Trait (mod.rs) : pub trait TimeZone: Sized + Clone"
			],
			[
				"Date",
				"DateTime               Struct (datetime.rs) : pub struct DateTime<Tz: TimeZone>      "
			],
			[
				"ordina",
				"ordinal   Function (datetime.rs) : fn ordinal(&self) -> u32           "
			],
			[
				"Naive",
				"NaiveDateTime Struct (datetime.rs) : pub struct NaiveDateTime"
			],
			[
				"timestamp",
				"timestamp            Function (mod.rs) : fn timestamp(&self, secs: i64, nsecs: u32) -> DateTime<Self>                 "
			],
			[
				"time",
				"timestamp_nanos              Function (mod.rs) : fn timestamp_nanos(&self, nanos: i64) -> DateTime<Self>                                "
			],
			[
				"and",
				"and_hms                     Function (date.rs) : pub fn and_hms(&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>                                                                                          "
			]
		]
	},
	"buffers":
	[
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 179,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pedometer.ino",
			"settings":
			{
				"buffer_size": 1606,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "pedometer.ino"
			}
		},
		{
			"contents": "\n\n\n//first calibrate on powering up the module \n//a poscal function to calculate avg values of x , y , z and print them on serial\n//turn on the LED on pin13 and turn it off after the calibration is completed\n\n\n//in loop continually read the data and calculate total accerelation vector \n//call stepdetect function\n//print total number of steps on monitor\n//if step occurs flash led 3 times\n \n\nconst int xpin=A2;\nint ypin=A3;\nint zpin=A4;\n\nint powerpin=A0;\nint gnd=A1;\n\nfloat threshhold=80.0;\n\nfloat xval[100]={0};\nfloat yval[100]={0};\nfloat zval[100]={0};\nfloat xavg;\n  float yavg;\n  float zavg;\n  \nint steps,flag=0;\nvoid setup()\n{\nSerial.begin(9600);\npinMode(powerpin,OUTPUT);\npinMode(gnd,OUTPUT);\ndigitalWrite(powerpin,HIGH);\ndigitalWrite(gnd,LOW);\npinMode(13,OUTPUT);\ncalibrate();\n\n\n}\n\n\n\nvoid loop()\n{int acc=0;\n  float totvect[100]={0};\nfloat totave[100]={0};\n //float sum1,sum2,sum3=0;\n  float xaccl[100]={0};\n   float yaccl[100]={0};\n    float zaccl[100]={0};\n   // float x,y,z;\n   \n  \nfor (int i=0;i<100;i++)\n{\nxaccl[i]=float(analogRead(xpin));\ndelay(1);\n\n\n//delay(100);\n//x=sum1/100.0;\n\n//Serial.println(xavg);\n\n\nyaccl[i]=float(analogRead(ypin));\ndelay(1);\n\n//sum2=yaccl[i]+sum2;\n\n//y=sum2/100.0;\n\n//Serial.println(yavg);\n//delay(100);\n\nzaccl[i]=float(analogRead(zpin));\ndelay(1);\n\n//sum3=zaccl[i]+sum3;\n//z=sum3/100;\n\n\n totvect[i] = sqrt(((xaccl[i]-xavg)* (xaccl[i]-xavg))+ ((yaccl[i] - yavg)*(yaccl[i] - yavg)) + ((zval[i] - zavg)*(zval[i] - zavg)));\n totave[i] = (totvect[i] + totvect[i-1]) / 2 ;\n //acc=acc+totave[i];\n Serial.println(totave[i]);\n delay(200);\n\n//cal steps \nif (totave[i]>threshhold && flag==0)\n{\n  steps=steps+1;\n  flag=1;\n \n}\n else if (totave[i] > threshhold && flag==1)\n{\n//do nothing \n}\n  if (totave[i] <threshhold  && flag==1)\n  {flag=0;}\n  Serial.println('\\n');\n  //Serial.print(\"steps=\");\n  //Serial.println(steps);\n}\n\n\n//float tim=acc/100;\n//Serial.println(tim);\n delay(1000);\n// stepcal(totave);\n\n \n}\n\n\n\n\n\n\n/*void stepcal(float arr[100])\n{   \n\n\n// int threshhold=80; \n float jack=0;\n//delay(100)\n//Serial.println(xavg);\nfor (int i=0;i<100;i++)\n{\njack=jack+arr[i];\n\n\n}\nfloat m=jack/100;\n\n//Serial.println(yavg);\n//delay(100);\n\n\n //detect pushups or count  for number of dumbles\n \n //crossing the threshold and \n \n //cross 20 in down and 80 in up \n \n /*add one to counter and set a flag high to indicate it is above a threshhold value \n\nif a flag is high and threshhold is crossed :do nothing }\nif signal falls below threshhold set flag to -1 indicating it is blow threshhold\n\n\nif (m>threshhold && flag==0)\n{\n  steps=steps+1;\n  flag=1;\n  Serial.println('\\n');\n  Serial.print(\"steps=\");\n  Serial.println(steps);\n}\n\nelse if (m > threshhold && flag==1)\n{\n//do nothing \n}\n  if (m <threshhold  && flag==1)\n  {flag=0;}\n  Serial.println('\\n');\n  Serial.print(\"steps=\");\n  Serial.println(steps);\n}  */\n  \n  \n\n//calculate total accerelation vector\n\n\n\n\n\n\n\nvoid calibrate()\n\n{\n\n  digitalWrite(13,HIGH);\n  \n  float sum=0;\n  float sum1=0;\n  float sum2=0;\nfor (int i=0;i<100;i++)\n{\nxval[i]=float(analogRead(xpin));\n\nsum=xval[i]+sum;\n}\ndelay(100);\nxavg=sum/100.0;\n\nSerial.println(xavg);\n\nfor (int j=0;j<100;j++)\n{\nxval[j]=float(analogRead(xpin));\n\nsum1=xval[j]+sum1;\n}\nyavg=sum1/100.0;\n\nSerial.println(yavg);\ndelay(100);\nfor (int i=0;i<100;i++)\n{\nzval[i]=float(analogRead(zpin));\n\nsum2=zval[i]+sum2;\n}\nzavg=sum2/100.0;\ndelay(100);\nSerial.println(zavg);\n\ndigitalWrite(13,LOW);\n\n}\n\n\n  \n//counting the pushups\n\n",
			"file": "/Users/jns/Desktop/FVANWU7HWJ7AHFJ.ino",
			"file_size": 3428,
			"file_write_time": 132555164906505777,
			"settings":
			{
				"buffer_size": 3427,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pedometer.sublime-project",
			"settings":
			{
				"buffer_size": 309,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/arduino-cli/arduino-cli.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/arduino-cli/arduino-cli.sublime-build",
					""
				],
				[
					"Packages/arduino-cli/arduino-cli.sublime-build",
					"just build"
				],
				[
					"Packages/arduino-cli/arduino-cli.sublime-build",
					"build and upload"
				]
			],
			[
				"Packages/arduino-cli/arduino-cli.sublime-build",
				"build and upload"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"arduino",
				"Build With: arduino-cli"
			],
			[
				"jsx",
				"Set Syntax: JSX"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"mini",
				"View: Toggle Minimap"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jns/Documents/code/rhythms/pedometer"
	],
	"file_history":
	[
		"/Users/jns/projects/luca/WriteNotes/process-images.js",
		"/Users/jns/projects/luca/WriteNotes/components/H1.js",
		"/Users/jns/projects/luca/WriteNotes/screens/Keyboard.js",
		"/Users/jns/projects/luca/WriteNotes/screens/About.js",
		"/Users/jns/projects/luca/WriteNotes/package.json",
		"/Users/jns/projects/luca/WriteNotes/screens/Impressum.js",
		"/Users/jns/projects/luca/WriteNotes/screens/index.js",
		"/Users/jns/Documents/code/rhythms/daylight-calendar/.gitignore"
	],
	"find":
	{
		"height": 75.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 179,
						"regions":
						{
						},
						"selection":
						[
							[
								179,
								179
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pedometer.ino",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1606,
						"regions":
						{
						},
						"selection":
						[
							[
								362,
								362
							]
						],
						"settings":
						{
							"auto_name": "pedometer.ino",
							"syntax": "Packages/arduino-cli/arduino.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 667.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/jns/Desktop/FVANWU7HWJ7AHFJ.ino",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3427,
						"regions":
						{
						},
						"selection":
						[
							[
								984,
								984
							]
						],
						"settings":
						{
							"syntax": "Packages/arduino-cli/arduino.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pedometer.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 309,
						"regions":
						{
						},
						"selection":
						[
							[
								241,
								225
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 63.0
	},
	"input":
	{
		"height": 75.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 373.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "pedometer.sublime-project",
	"replace":
	{
		"height": 122.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package",
				"package.json"
			],
			[
				"chap",
				"screens/Chapter.js"
			],
			[
				"impres",
				"screens/Impressum.js"
			],
			[
				"index",
				"screens/index.js"
			],
			[
				"task",
				"screens/Task.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 291.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
